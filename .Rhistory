# number 24208 (Italsat 2) the 26th of June, 2006 at 00:58:29.34 UTC.
n0 <- 1.007781*((2*pi)/(1440)) # Multiplication by 2pi/1440 to convert to radians/min
e0 <- 0.002664 # mean eccentricity at epoch
i0 <- 3.8536*pi/180 # mean inclination at epoch in radians
M0 <- 48.3*pi/180 # mean anomaly at epoch in radians
omega0 <- 311.0977*pi/180 # mean argument of perigee at epoch in radians
OMEGA0 <- 80.0121*pi/180 # mean longitude of ascending node at epoch in radians
Bstar <- 1e-04 # drag coefficient
epochDateTime <- "2006-06-26 00:58:29.34"
# Lets calculate the position and velocity of the satellite 1 day later
state_1day_TEME <- sgdp4(n0=n0, e0=e0, i0=i0, M0=M0, omega0=omega0, OMEGA0=OMEGA0,
Bstar=Bstar, initialDateTime=epochDateTime, targetTime=1440)
# We can now convert the results in TEME frame to GCRF frame, previously
# multiplying by 1000 to convert the km output of sgdp4 to m
state_1day_GCRF <- TEMEtoGCRF(state_1day_TEME$position*1000,
state_1day_TEME$velocity*1000,
"2006-06-27 00:58:29.34")
# Finally, we convert the results in GCRF frame to geodetic latitude, longitude
# and altitude
state_1day_geodetic <- GCRFtoLATLON(state_1day_GCRF$position, "2006-06-27 00:58:29.34")
}
state_1day_geodetic
state_1day_GCRF
state_1day_GCRF$position
class(state_1day_GCRF$position)
print(row)
class(row)
class(row$X)
state_1day_GCRF$position
class(state_1day_GCRF$position)
class(state_1day_GCRF$position[1])
state_1day_GCRF$position[1]
state_1day_GCRF$position[2]
state_1day_GCRF$position[3]
row
row[1]
row[2]
row[3]
GCRFtoLATLON(row, t, degreesOutput=TRUE)
t
GCRFtoLATLON(row, "2023-06-16 12:57:31", degreesOutput=TRUE)
for (i in 1: 10) {
row <- position_GCRF[i, ]# Access current row using index 'i'
print(row)
# Convert dataframe to array
array <- as.matrix(row)
t <- parsed_time[i,]
print(t)
out <- GCRFtoLATLON(array , t, degreesOutput=TRUE)
result <- rbind(result, out)
}
for (i in 1: 10) {
row <- position_GCRF[i, ]# Access current row using index 'i'
# print(row)
# Convert dataframe to array
array <- as.matrix(row)
t <- parsed_time[i,]
#print(t)
out <- GCRFtoLATLON(array , t, degreesOutput=TRUE)
print(out)
result <- rbind(result, out)
}
result <- data.frame()
for (i in 1: nrow(position_GCRF)) {
row <- position_GCRF[i, ]# Access current row using index 'i'
# print(row)
# Convert dataframe to array
array <- as.matrix(row)
t <- parsed_time[i,]
#print(t)
out <- GCRFtoLATLON(array , t, degreesOutput=TRUE)
#print(out)
result <- rbind(result, out)
}
result <- data.frame()
for (i in 1: nrow(position_GCRF)) {
row <- position_GCRF[i, ]# Access current row using index 'i'
print(row)
# Convert dataframe to array
array <- as.matrix(row)
t <- parsed_time[i,]
#print(t)
out <- GCRFtoLATLON(array , t, degreesOutput=TRUE)
#print(out)
result <- rbind(result, out)
}
print(row)
t
dateTime <- data.frame(cbind(testOEM_ISS$dataBlocks[[1]]$ephemerides$epoch))
dateTime[4128,]
GCRFtoLATLON(array , "2023-06-28 00:00:00.000", degreesOutput=TRUE)
dateTime <- data.frame(cbind(testOEM_ISS$dataBlocks[[1]]$ephemerides$epoch))
#dateTime<- substr(dateTime$cbind.testOEM_ISS.dataBlocks..1...ephemerides.epoch. ,
#       1, nchar(dateTime$cbind.testOEM_ISS.dataBlocks..1...ephemerides.epoch. ) - 4)
# Convert the time string to a POSIXlt object
parsed_time <- data.frame(strptime(dateTime, format = "%Y-%m-%d %H:%M:%S", tz = 'UTC'))
dateTime <- data.frame(cbind(testOEM_ISS$dataBlocks[[1]]$ephemerides$epoch))
dateTime<- substr(dateTime$cbind.testOEM_ISS.dataBlocks..1...ephemerides.epoch. ,
1, nchar(dateTime$cbind.testOEM_ISS.dataBlocks..1...ephemerides.epoch. ) - 4)
# Convert the time string to a POSIXlt object
parsed_time <- data.frame(strptime(dateTime, format = "%Y-%m-%d %H:%M:%S", tz = 'UTC'))
colnames(parsed_time) <- c('date')
#install.packages("asteRiskData", repos="https://rafael-ayala.github.io/drat/")
library(asteRiskData)
getLatestSpaceData(targets="all")
result <- data.frame()
for (i in 1: nrow(position_GCRF)) {
row <- position_GCRF[i, ]# Access current row using index 'i'
print(row)
# Convert dataframe to array
array <- as.matrix(row)
t <- parsed_time[i,]
#print(t)
out <- GCRFtoLATLON(array , t, degreesOutput=TRUE)
#print(out)
result <- rbind(result, out)
}
t
dateTime <- data.frame(cbind(testOEM_ISS$dataBlocks[[1]]$ephemerides$epoch))
as.POSIXlt(dateTime)
as.Date(dateTime)
dateTime <- data.frame(cbind(testOEM_ISS$dataBlocks[[1]]$ephemerides$epoch))
as.Date(dateTime)
as.Date(dateTime$cbind.testOEM_ISS.dataBlocks..1...ephemerides.epoch.)
?as.Date
as.Date(dateTime$cbind.testOEM_ISS.dataBlocks..1...ephemerides.epoch. , "%Y-%m-%d %H:%M:%S")
test<- as.Date(dateTime$cbind.testOEM_ISS.dataBlocks..1...ephemerides.epoch. , "%Y-%m-%d %H:%M:%S")
head(test)
test<- as.Date(dateTime$cbind.testOEM_ISS.dataBlocks..1...ephemerides.epoch. , format = "%Y-%m-%d %H:%M:%S")
test
head(test)
dateTime <- data.frame(cbind(testOEM_ISS$dataBlocks[[1]]$ephemerides$epoch))
datetime <- ymd_hms(dateTime)
library(lubridate)
install.packages("lubridate")
library(lubridate)
datetime <- ymd_hms(dateTime)
datetime <- ymd_hms(dateTime$cbind.testOEM_ISS.dataBlocks..1...ephemerides.epoch.)
datetime
colnames(datetime ) <- c('date')
datetime[1]
datetime[2]
result <- data.frame()
for (i in 1: nrow(position_GCRF)) {
row <- position_GCRF[i, ]# Access current row using index 'i'
print(row)
# Convert dataframe to array
array <- as.matrix(row)
t <- datetime[i]
#print(t)
out <- GCRFtoLATLON(array , t, degreesOutput=TRUE)
#print(out)
result <- rbind(result, out)
}
t
datetime[i]
t
array
datetime[i-1]
result <- data.frame()
for (i in 1: nrow(position_GCRF)) {
row <- position_GCRF[i, ]# Access current row using index 'i'
print(row)
# Convert dataframe to array
array <- as.matrix(row)
t <- datetime[i]
if (i  == 4128) {t <- "2023-06-28 00:00:00 UTC"}
#print(t)
out <- GCRFtoLATLON(array , t, degreesOutput=TRUE)
#print(out)
result <- rbind(result, out)
}
t
length(t)
nchar(t)
nchar(datetime[i])
nchar(datetime[i-1])
nchar(datetime[i-2])
datetime[i-2]
nchar(datetime[i-2])
result <- data.frame()
for (i in 1: nrow(position_GCRF)) {
row <- position_GCRF[i, ]# Access current row using index 'i'
print(row)
# Convert dataframe to array
array <- as.matrix(row)
t <- datetime[i]
if (i  == 4128) {t <- "2023-06-28 00:00:00 UTC"}
if (i  == 4488) {t <- "2023-06-29 00:00:00 UTC"}
#print(t)
out <- GCRFtoLATLON(array , t, degreesOutput=TRUE)
#print(out)
result <- rbind(result, out)
}
t
result <- data.frame()
for (i in 1: nrow(position_GCRF)) {
row <- position_GCRF[i, ]# Access current row using index 'i'
print(row)
# Convert dataframe to array
array <- as.matrix(row)
t <- datetime[i]
if (i  == 4128) {t <- "2023-06-28 00:00:00 UTC"}
if (i  == 4488) {t <- "2023-06-29 00:00:00 UTC"}
if (i  == 4448) {t <- "2023-06-30 00:00:00 UTC"}
#print(t)
out <- GCRFtoLATLON(array , t, degreesOutput=TRUE)
#print(out)
result <- rbind(result, out)
}
t
for (i in 1: nrow(position_GCRF)) {
row <- position_GCRF[i, ]# Access current row using index 'i'
print(row)
# Convert dataframe to array
array <- as.matrix(row)
t <- datetime[i]
if (i  == 4128) {t <- "2023-06-28 00:00:00 UTC"}
if (i  == 4488) {t <- "2023-06-29 00:00:00 UTC"}
if (i  == 4848) {t <- "2023-06-30 00:00:00 UTC"}
#print(t)
out <- GCRFtoLATLON(array , t, degreesOutput=TRUE)
#print(out)
result <- rbind(result, out)
}
t
result <- data.frame()
for (i in 1: nrow(position_GCRF)) {
row <- position_GCRF[i, ]# Access current row using index 'i'
print(row)
# Convert dataframe to array
array <- as.matrix(row)
t <- datetime[i]
if (i  == 4128) {t <- "2023-06-28 00:00:00 UTC"}
if (i  == 4488) {t <- "2023-06-29 00:00:00 UTC"}
if (i  == 4848) {t <- "2023-06-30 00:00:00 UTC"}
if (i  == 5208) {t <- "2023-07-01 00:00:00 UTC"}
#print(t)
out <- GCRFtoLATLON(array , t, degreesOutput=TRUE)
#print(out)
result <- rbind(result, out)
}
head( result )
plot(result$X414317.231569037)
ggplot(result, aes(x = X9.38681001909205, y = X.119.716310990453)) +
geom_point(aes(size = X414317.231569037)) +
labs(x = "Longitude", y = "Latitude", size = "Height") +
theme_minimal()
ggplot(result, aes(x =X.119.716310990453 , y = X9.38681001909205)) +
geom_point(aes(size = X414317.231569037)) +
labs(x = "Longitude", y = "Latitude", size = "Height") +
theme_minimal()
ggplot(result, aes(x =X.119.716310990453 , y = X9.38681001909205, color = X414317.231569037)) +
geom_point(size = 3) +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "Longitude", y = "Latitude", color = "Height") +
theme_minimal()
head(testOEM_ISS$dataBlocks[[1]]$ephemerides)
ggplot(result, aes(x = X414317.231569037)) +
geom_histogram(binwidth = 50, fill = "blue", color = "black") +
labs(x = "Elevation", y = "Count") +
theme_minimal()
ggplot(result, aes(x = X414317.231569037)) +
geom_histogram(binwidth = 100, fill = "blue", color = "black") +
labs(x = "Elevation", y = "Count") +
theme_minimal()
ggplot(result, aes(x = X414317.231569037)) +
geom_histogram(binwidth = 200, fill = "blue", color = "black") +
labs(x = "Elevation", y = "Count") +
theme_minimal()
ggplot(result, aes(x = X414317.231569037)) +
geom_histogram(binwidth = 100, fill = "blue", color = "black") +
labs(x = "Elevation", y = "Count") +
theme_minimal()
dt <- cbind(datetime, result$X414317.231569037)
head(dt)
colnames(dt) <- c('t', 'h')
colnames(dt) <- c('t', 'h')
ggplot(dt, aes(x =t , y = h, color = h)) +
geom_point(size = 3) +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "t", y = "h", color = "Height") +
theme_minimal()
class(dt)
dt <- data.frame(cbind(datetime, result$X414317.231569037))
colnames(dt) <- c('t', 'h')
ggplot(dt, aes(x =t , y = h, color = h)) +
geom_point(size = 3) +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "t", y = "h", color = "Height") +
theme_minimal()
ggplot(dt, aes(x =t , y = h, color = h)) +
geom_line() +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "t", y = "h", color = "Height") +
theme_minimal()
ggplot(dt, aes(x =t , y = h, color = h)) +
geom_line() +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "t", y = "h", color = "Height") +
scale_x_date(date_labels = "%b %d, %Y") +
theme_minimal()
ggplot(dt, aes(x =t , y = h, color = h)) +
geom_line() +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "t", y = "h", color = "Height") +
scale_x_date(date_breaks = "1 month", date_labels = "%b %Y") +
theme_minimal()
dt$t
dt <- data.frame(cbind(dateTime, result$X414317.231569037))
colnames(dt) <- c('t', 'h')
ggplot(dt, aes(x =t , y = h, color = h)) +
geom_line() +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "t", y = "h", color = "Height") +
scale_x_date(date_breaks = "1 month", date_labels = "%b %Y") +
theme_minimal()
head(dateTime)
dt <- data.frame(cbind(dateTime, result$X414317.231569037))
colnames(dt) <- c('t', 'h')
ggplot(dt, aes(x =t , y = h, color = h)) +
geom_line() +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "t", y = "h", color = "Height") +
scale_x_date(date_breaks = "1 month", date_labels = "%b %Y") +
theme_minimal()
ggplot(dt, aes(x =t , y = h, color = h)) +
geom_line() +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "t", y = "h", color = "Height") +
theme_minimal()
ggplot(dt, aes(x =t , y = h, color = h)) +
geom_point() +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "t", y = "h", color = "Height") +
theme_minimal()
dt$t[1]
dt$t[1,]
dt$t[,1]
dt$t[1,]
dt$t[:,]
ggplot(dt, aes(x =t , y = h, color = h)) +
geom_line() +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "t", y = "h", color = "Height") +
theme_minimal()
ggplot(dt, aes(x =t , y = h, color = h)) +
geom_point() +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "t", y = "h", color = "Height") +
theme_minimal()
dt <- dt[, 1:100]
dt <- data.frame(cbind(dateTime, result$X414317.231569037))
colnames(dt) <- c('t', 'h')
# Subset the first 1000 columns
dt <- dt[, 1:100]
dt[, 1:100]
dt[ 1:100, ]
dt <- dt[ 1:100, ]
ggplot(dt, aes(x =t , y = h, color = h)) +
geom_point() +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "t", y = "h", color = "Height") +
theme_minimal()
ggplot(dt, aes(x =t , y = h, color = h)) +
geom_line() +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "t", y = "h", color = "Height") +
theme_minimal()
ggplot(dt, aes(x =t , y = h)) +
geom_line() +
labs(x = "t", y = "h", color = "Height") +
theme_minimal()
ggplot(dt, aes(x =t , y = h, color = h)) +
geom_line() +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "t", y = "h") +
theme_minimal()
ggplot(dt, aes(x =t , y = h)) +
geom_line() +
# scale_color_gradient(low = "red", high = "blue") +
labs(x = "t", y = "h") +
theme_minimal()
ggplot(dt, aes(x =t , y = h)) +
geom_point() +
# scale_color_gradient(low = "red", high = "blue") +
labs(x = "t", y = "h") +
theme_minimal()
ggplot(dt, aes(x =t , y = h, color = h)) +
geom_line() +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "t", y = "h") +
theme_minimal()
ggplot(dt, aes(x =t , y = h, color = h)) +
geom_line() +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "t", y = "h", color = "Height") +
theme_minimal()
ggplot(dt, aes(x =t , y = h, color = h)) +
geom_point() +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "t", y = "h", color = "Height") +
theme_minimal()
ggplot(dt, aes(x =t , y = h, color = h)) +
geom_point() +
scale_color_gradient(low = "red", high = "blue") +
scale_x_date(labels = date_format("%Y-%m-%d")) +
labs(x = "t", y = "h", color = "Height") +
theme_minimal()
ggplot(dt, aes(x =t , y = h, color = h)) +
geom_point() +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "t", y = "h", color = "Height") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
theme_minimal()
ggplot(dt, aes(x =t , y = h, color = h)) +
geom_point() +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "t", y = "h", color = "Height") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme_minimal()
ggplot(dt, aes(x =t , y = h, color = h)) +
geom_point() +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "t", y = "h", color = "Height") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(dt, aes(x =t , y = h, color = h)) +
geom_point() +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "t", y = "h", color = "Height") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
dt <- dt[ 1:100, ]
ggplot(dt, aes(x =t , y = h, color = h)) +
geom_point(size=5) +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "t", y = "h", color = "Height") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
dt <- dt[ 1:1000, ]
ggplot(dt, aes(x =t , y = h, color = h)) +
geom_point(size=5) +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "t", y = "h", color = "Height") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
dt <- data.frame(cbind(dateTime, result$X414317.231569037))
colnames(dt) <- c('t', 'h')
# Subset the first 1000 columns
#dt <- dt[ 1:1000, ]
ggplot(dt, aes(x =t , y = h, color = h)) +
geom_point(size=5) +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "t", y = "h", color = "Height") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
dt <- dt[ 1:1000, ]
ggplot(dt, aes(x =t , y = h, color = h)) +
geom_point(size=5) +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "t", y = "h", color = "Height") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
dt <- dt[ 1:200, ]
ggplot(dt, aes(x =t , y = h, color = h)) +
geom_point(size=5) +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "t", y = "h", color = "Height") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
dt <- dt[ 1:100, ]
ggplot(dt, aes(x =t , y = h, color = h)) +
geom_point(size=5) +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "t", y = "h", color = "Height") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
dt <- dt[ 4000:4100, ]
ggplot(dt, aes(x =t , y = h, color = h)) +
geom_point(size=5) +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "t", y = "h", color = "Height") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
dt <- data.frame(cbind(dateTime, result$X414317.231569037))
colnames(dt) <- c('t', 'h')
# Subset the first 1000 columns
dt <- dt[ 1000:1100, ]
ggplot(dt, aes(x =t , y = h, color = h)) +
geom_point(size=5) +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "t", y = "h", color = "Height") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
dt <- data.frame(cbind(dateTime, result$X414317.231569037))
colnames(dt) <- c('t', 'h')
# Subset the first 1000 columns
dt <- dt[ 4000:4100, ]
ggplot(dt, aes(x =t , y = h, color = h)) +
geom_point(size=5) +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "t", y = "h", color = "Height") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
setwd("Z:/vclgp/xiongl/HeightComparisonGEDI_IS2_IS1/projects_github/spacebornelidar_comparision")
load('Z:/vclgp/xiongl/HeightComparisonGEDI_IS2_IS1/Data/icesat_glas_umd_v1.RData')
glas_veg[1,]
library(raster)
is1 <- glas_veg[, c('lon', 'lat', 'ht')]
e <- extent(-180, 180, -90, 90)
r <- raster(e, ncol=2880, nrow=1440, crs = '+proj=longlat +datum=WGS84') ### 0.125 degree
plot(r)
e <- extent(-180, 180, -90, 90)
r <- raster(e, ncol=2880, nrow=1440, crs = '+proj=longlat +datum=WGS84') ### 0.125 degree
plot(r)
# you need to provide a function 'fun' for when there are multiple points per cell
x <- rasterize(is1[, 1:2], r, is1[,3], fun=mean) # min, max, or mean
xyz_data <- rasterToPoints(x)
plot(x)
write.csv(xyz_data, file = "../Out/is1_global_0dot125degree_gridded.csv", row.names = FALSE)
write.csv(xyz_data, file = "Z:/vclgp/xiongl/HeightComparisonGEDI_IS2_IS1/Out/is1_global_0dot125degree_gridded.csv", row.names = FALSE)
head(xyz_data)
